---
- name: "Configure global email"
  git_config:
    scope: global
    name: user.email
    value: "{{ git.email }}"

- name: "Configure global name"
  git_config:
    scope: global
    name: user.name
    value: "{{ git.name }}"

- name: "Configure global editor"
  git_config:
    scope: global
    name: core.editor
    value: vim

# This configuration is needed to clone the monorepo
- name: Update git config to improve monorepo performance
  git_config:
    scope: global
    name: core.compression
    value: 9

- name: Copy global .gitignore
  ansible.builtin.copy:
    src: templates/.gitignore_global
    dest: ~/.gitignore_global

- name: Update git config for globally ignored files
  git_config:
    scope: global
    name: core.excludesfile
    value: ~/.gitignore_global

- name: Workspace directory
  file:
    path: "~/workspace/{{ masmovil_org }}"
    state: directory

- name: Clone repos
  loop: "{{ masmovil_repos }}"
  git:
    repo: "git@github.com:{{ masmovil_org }}/{{ item }}.git"
    dest: "~/workspace/{{ masmovil_org }}/{{ item }}"

- name: "Configure email for {{ item }}"
  loop: "{{ masmovil_repos }}"
  git_config:
    scope: local
    repo: "~/workspace/{{ masmovil_org }}/{{ item }}"
    name: user.email
    value: "{{ masmovil_git.email }}"

- name: "Configure name for {{ item }}"
  loop: "{{ masmovil_repos }}"
  git_config:
    scope: local
    repo: "~/workspace/{{ masmovil_org }}/{{ item }}"
    name: user.name
    value: "{{ masmovil_git.name }}"

- name: "Additional git config for {{ item.repo }}"
  loop: "{{ masmovil_git.additional_config }}"
  git_config:
    scope: local
    repo: "~/workspace/{{ masmovil_org }}/{{ item.repo }}"
    name: "{{ item.key }}"
    value: "{{ item.value }}"

- name: Link OpenJDK
  become: true
  file:
    src: /opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk
    dest: /Library/Java/JavaVirtualMachines/openjdk-11.jdk
    state: link

- name: Check if ~/.zshrc exists
  stat:
    path: ~/.zshrc
  register: zshrc_stat_result

- name: Check if ~/.bashrc exists
  stat:
    path: ~/.bashrc
  register: bashrc_stat_result

- name: Add configuration to .zshrc
  when: zshrc_stat_result.stat.exists
  blockinfile:
    state: present
    insertafter: EOF
    dest: ~/.zshrc
    marker: "#### {mark} ANSIBLE MANAGED BLOCK ####"
    content: |
      # Java 11
      export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
      export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"

      # Helm
      export HELM_HOME=$HOME/.helm
      export HELM_REGISTRY_CONFIG="~/.docker/config.json"

      # GCloud SDK
      source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
      source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"

      # Docker
      export DOCKER_HOST="unix://${HOME}/.colima/default/docker.sock"

- name: Add configuration to .bashrc
  when: bashrc_stat_result.stat.exists
  blockinfile:
    state: present
    insertafter: EOF
    dest: ~/.bashrc
    marker: "#### {mark} ANSIBLE MANAGED BLOCK ####"
    content: |
      # Java 11
      export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
      export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"

      # Helm
      export HELM_HOME=$HOME/.helm
      export HELM_REGISTRY_CONFIG="~/.docker/config.json"

      # GCloud SDK
      source "$(brew --prefix)/share/google-cloud-sdk/path.bash.inc"

      # Docker
      export DOCKER_HOST="unix://${HOME}/.colima/default/docker.sock"

- name: Docker configuration
  ansible.builtin.copy:
    src: templates/docker-config.json
    dest: ~/.docker/config.json

- name: Testcontainers configuration
  ansible.builtin.copy:
    src: templates/.testcontainers.properties
    dest: ~/.testcontainers.properties

- name: Install GCloud components
  command: "gcloud components install kubectl -q"
- name: GCloud SDK login
  tags: ["gcp_credentials"]
  command: gcloud auth login

- name: GCloud login for other applications
  tags: ["gcp_credentials"]
  command: gcloud auth application-default login

- name: GCloud configure docker europe registry
  tags: ["gcp_credentials"]
  command: gcloud auth configure-docker europe-docker.pkg.dev

- name: GCloud configure other registries
  tags: ["gcp_credentials"]
  command: gcloud auth configure-docker

- name: GCP clusters credentials
  tags: ["gcp_credentials", "k8s_credentials"]
  command: "gcloud container clusters get-credentials {{ item.name }} --region {{ item.region }} --project {{ item.project }}"
  loop: "{{ masmovil_clusters }}"

- debug:
    msg: You may need to source ~/.bashrc or ~/.zshrc for some commands to work.
